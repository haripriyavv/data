# -*- coding: utf-8 -*-
"""DSP2_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SPf1WcHFh5-F7nFB7MZN2bXQPsvJ_xaS
"""

# streamlit_app.py

import joblib
import numpy as np
import streamlit as st

# Load the trained model and scaler using joblib
model = joblib.load('gradient_boosting_model.pkl')
scaler = joblib.load('scaler.pkl')

# Streamlit UI elements
st.title("Solar Power Generation Predictor")
st.write("Enter the features to predict power generation.")


distance_to_solar_noon = st.number_input("Distance to Solar Noon", min_value=0.0)
temperature = st.number_input("Temperature")
wind_direction = st.number_input("Wind Direction")
wind_speed = st.number_input("Wind Speed")
sky_cover = st.number_input("Sky Cover")
visibility = st.number_input("Visibility")
humidity = st.number_input("Humidity")
avg_wind_speed = st.number_input("Average Wind Speed (Period)")
avg_pressure = st.number_input("Average Pressure (Period)")

features = np.array([[distance_to_solar_noon, temperature, wind_direction, wind_speed,
                      sky_cover, visibility, humidity, avg_wind_speed, avg_pressure]])

# Prediction button
if st.button("Predict"):
    features = np.array([[feature_1, feature_2]])  # Adjust based on your model's input
    features_scaled = scaler.transform(features)
    prediction = model.predict(features_scaled)
    st.write(f"Predicted Power Generation: {prediction[0]}")